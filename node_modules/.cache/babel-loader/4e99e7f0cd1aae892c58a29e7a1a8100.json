{"ast":null,"code":"import _regeneratorRuntime from \"/Users/ChampionRobert/ForkedStudioProjects/fullstack-js-arch-webonly/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/ChampionRobert/ForkedStudioProjects/fullstack-js-arch-webonly/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n// Imports\nimport axios from 'axios'; // App Imports\n\nimport { API_URL } from '../../../../setup/config/env';\nimport { MESSAGE_SHOW } from '../../../common/api/actions';\nimport { NOTE_LIST_CACHE } from './cache-keys';\nimport { LIST_REQUEST, LIST_RESPONSE, LIST_DONE } from './types'; // Actions\n// Get list\n\nexport function list() {\n  var isLoading = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var _list, _yield$axios$post, data, _list2;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // Caching\n              try {\n                _list = JSON.parse(window.localStorage.getItem(NOTE_LIST_CACHE));\n\n                if (_list) {\n                  dispatch({\n                    type: LIST_RESPONSE,\n                    list: _list\n                  });\n                } else {\n                  dispatch({\n                    type: LIST_REQUEST,\n                    isLoading\n                  });\n                }\n              } catch (e) {\n                dispatch({\n                  type: LIST_REQUEST,\n                  isLoading\n                });\n              }\n\n              _context.prev = 1;\n              _context.next = 4;\n              return axios.post(API_URL, {\n                operation: 'noteList',\n                fields: ['_id', 'note', 'createdAt']\n              });\n\n            case 4:\n              _yield$axios$post = _context.sent;\n              data = _yield$axios$post.data;\n\n              if (!data.success) {\n                dispatch({\n                  type: MESSAGE_SHOW,\n                  success: data.success,\n                  message: data.message\n                });\n              } else {\n                _list2 = data.data;\n                dispatch({\n                  type: LIST_RESPONSE,\n                  list: _list2\n                });\n                window.localStorage.setItem(NOTE_LIST_CACHE, JSON.stringify(_list2));\n              }\n\n              _context.next = 12;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](1);\n              dispatch({\n                type: MESSAGE_SHOW,\n                success: false,\n                message: _context.t0.message\n              });\n\n            case 12:\n              _context.prev = 12;\n              dispatch({\n                type: LIST_DONE,\n                isLoading: false\n              });\n              return _context.finish(12);\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 9, 12, 15]]);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n} // Get detail\n\nexport function detail(_ref2) {\n  var noteId = _ref2.noteId;\n  return function (dispatch) {\n    return axios.post(API_URL, {\n      operation: 'noteDetail',\n      params: {\n        noteId\n      }\n    });\n  };\n}","map":{"version":3,"sources":["/Users/ChampionRobert/ForkedStudioProjects/fullstack-js-arch-webonly/src/modules/note/api/actions/query.js"],"names":["axios","API_URL","MESSAGE_SHOW","NOTE_LIST_CACHE","LIST_REQUEST","LIST_RESPONSE","LIST_DONE","list","isLoading","dispatch","JSON","parse","window","localStorage","getItem","type","e","post","operation","fields","data","success","message","setItem","stringify","detail","noteId","params"],"mappings":";;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,SAASC,OAAT,QAAwB,8BAAxB;AACA,SAASC,YAAT,QAA6B,6BAA7B;AACA,SAASC,eAAT,QAAgC,cAAhC;AACA,SAASC,YAAT,EAAuBC,aAAvB,EAAsCC,SAAtC,QAAuD,SAAvD,C,CAEA;AAEA;;AACA,OAAO,SAASC,IAAT,GAAgC;AAAA,MAAlBC,SAAkB,uEAAN,IAAM;AACrC;AAAA,wEAAO,iBAAMC,QAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AACL;AACA,kBAAI;AACIF,gBAAAA,KADJ,GACWG,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BX,eAA5B,CAAX,CADX;;AAGF,oBAAGI,KAAH,EAAS;AACPE,kBAAAA,QAAQ,CAAC;AACPM,oBAAAA,IAAI,EAAEV,aADC;AAEPE,oBAAAA,IAAI,EAAJA;AAFO,mBAAD,CAAR;AAID,iBALD,MAKO;AACLE,kBAAAA,QAAQ,CAAC;AACPM,oBAAAA,IAAI,EAAEX,YADC;AAEPI,oBAAAA;AAFO,mBAAD,CAAR;AAID;AACF,eAdD,CAcE,OAAMQ,CAAN,EAAS;AACTP,gBAAAA,QAAQ,CAAC;AACPM,kBAAAA,IAAI,EAAEX,YADC;AAEPI,kBAAAA;AAFO,iBAAD,CAAR;AAID;;AArBI;AAAA;AAAA,qBAwBoBR,KAAK,CAACiB,IAAN,CAAWhB,OAAX,EAAoB;AACzCiB,gBAAAA,SAAS,EAAE,UAD8B;AAEzCC,gBAAAA,MAAM,EAAE,CAAC,KAAD,EAAQ,MAAR,EAAgB,WAAhB;AAFiC,eAApB,CAxBpB;;AAAA;AAAA;AAwBKC,cAAAA,IAxBL,qBAwBKA,IAxBL;;AA6BH,kBAAG,CAACA,IAAI,CAACC,OAAT,EAAkB;AAChBZ,gBAAAA,QAAQ,CAAC;AACPM,kBAAAA,IAAI,EAAEb,YADC;AAEPmB,kBAAAA,OAAO,EAAED,IAAI,CAACC,OAFP;AAGPC,kBAAAA,OAAO,EAAEF,IAAI,CAACE;AAHP,iBAAD,CAAR;AAKD,eAND,MAMO;AACCf,gBAAAA,MADD,GACQa,IAAI,CAACA,IADb;AAGLX,gBAAAA,QAAQ,CAAC;AACPM,kBAAAA,IAAI,EAAEV,aADC;AAEPE,kBAAAA,IAAI,EAAJA;AAFO,iBAAD,CAAR;AAKAK,gBAAAA,MAAM,CAACC,YAAP,CAAoBU,OAApB,CAA4BpB,eAA5B,EAA6CO,IAAI,CAACc,SAAL,CAAejB,MAAf,CAA7C;AACD;;AA5CE;AAAA;;AAAA;AAAA;AAAA;AA8CHE,cAAAA,QAAQ,CAAC;AACPM,gBAAAA,IAAI,EAAEb,YADC;AAEPmB,gBAAAA,OAAO,EAAE,KAFF;AAGPC,gBAAAA,OAAO,EAAE,YAAMA;AAHR,eAAD,CAAR;;AA9CG;AAAA;AAoDHb,cAAAA,QAAQ,CAAC;AACPM,gBAAAA,IAAI,EAAET,SADC;AAEPE,gBAAAA,SAAS,EAAE;AAFJ,eAAD,CAAR;AApDG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AA0DD,C,CAED;;AACA,OAAO,SAASiB,MAAT,QAA4B;AAAA,MAAVC,MAAU,SAAVA,MAAU;AACjC,SAAO,UAAAjB,QAAQ,EAAI;AACjB,WAAOT,KAAK,CAACiB,IAAN,CAAWhB,OAAX,EAAoB;AACzBiB,MAAAA,SAAS,EAAE,YADc;AAEzBS,MAAAA,MAAM,EAAE;AAAED,QAAAA;AAAF;AAFiB,KAApB,CAAP;AAID,GALD;AAMD","sourcesContent":["// Imports\nimport axios from 'axios'\n\n// App Imports\nimport { API_URL } from '../../../../setup/config/env'\nimport { MESSAGE_SHOW } from '../../../common/api/actions'\nimport { NOTE_LIST_CACHE } from './cache-keys'\nimport { LIST_REQUEST, LIST_RESPONSE, LIST_DONE } from './types'\n\n// Actions\n\n// Get list\nexport function list(isLoading = true) {\n  return async dispatch => {\n    // Caching\n    try {\n      const list = JSON.parse(window.localStorage.getItem(NOTE_LIST_CACHE))\n\n      if(list) {\n        dispatch({\n          type: LIST_RESPONSE,\n          list\n        })\n      } else {\n        dispatch({\n          type: LIST_REQUEST,\n          isLoading\n        })\n      }\n    } catch(e) {\n      dispatch({\n        type: LIST_REQUEST,\n        isLoading\n      })\n    }\n\n    try {\n      const { data } = await axios.post(API_URL, {\n        operation: 'noteList',\n        fields: ['_id', 'note', 'createdAt']\n      })\n\n      if(!data.success) {\n        dispatch({\n          type: MESSAGE_SHOW,\n          success: data.success,\n          message: data.message\n        })\n      } else {\n        const list = data.data\n\n        dispatch({\n          type: LIST_RESPONSE,\n          list\n        })\n\n        window.localStorage.setItem(NOTE_LIST_CACHE, JSON.stringify(list))\n      }\n    } catch(error) {\n      dispatch({\n        type: MESSAGE_SHOW,\n        success: false,\n        message: error.message\n      })\n    } finally {\n      dispatch({\n        type: LIST_DONE,\n        isLoading: false\n      })\n    }\n  }\n}\n\n// Get detail\nexport function detail({ noteId }) {\n  return dispatch => {\n    return axios.post(API_URL, {\n      operation: 'noteDetail',\n      params: { noteId }\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}