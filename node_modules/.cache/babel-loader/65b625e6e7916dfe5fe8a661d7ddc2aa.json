{"ast":null,"code":"import _regeneratorRuntime from \"/Users/ChampionRobert/ForkedStudioProjects/fullstack-js-arch-webonly/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/ChampionRobert/ForkedStudioProjects/fullstack-js-arch-webonly/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/ChampionRobert/ForkedStudioProjects/fullstack-js-arch-webonly/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/ChampionRobert/ForkedStudioProjects/fullstack-js-arch-webonly/src/modules/admin/dashboard/Dashboard/index.js\";\n\n// Imports\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom'; // UI Imports\n\nimport Typography from '@material-ui/core/Typography';\nimport Toolbar from '@material-ui/core/Toolbar/Toolbar';\nimport Button from '@material-ui/core/Button/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport { withStyles } from '@material-ui/core/styles';\nimport styles from './styles'; // App Imports\n\nimport routes from '../../../../setup/routes';\nimport { getDashboardCount } from '../../../user/api/actions/query';\nimport { messageShow } from '../../../common/api/actions';\nimport Section from '../../../common/Section';\nimport Loading from '../../../common/Loading'; // Component\n\nvar Dashboard = function Dashboard(_ref) {\n  var classes = _ref.classes;\n\n  // state\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isRefreshing = _useState2[0],\n      isRefreshingToggle = _useState2[1];\n\n  var _useState3 = useState({\n    users: 0,\n    notes: 0\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      counts = _useState4[0],\n      setCounts = _useState4[1];\n\n  var dispatch = useDispatch(); // on component load\n\n  useEffect(function () {\n    refresh()();\n  }, []); // refresh\n\n  var refresh = function refresh() {\n    return /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _counts;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              isRefreshingToggle(true);\n              _context.prev = 1;\n              _context.next = 4;\n              return getDashboardCount();\n\n            case 4:\n              _counts = _context.sent;\n\n              if (_counts.data && _counts.data.success) {\n                setCounts(_counts.data.data);\n              }\n\n              _context.next = 11;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](1);\n              dispatch(messageShow('There was some error. Please try again.'));\n\n            case 11:\n              _context.prev = 11;\n              isRefreshingToggle(false);\n              return _context.finish(11);\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 8, 11, 14]]);\n    }));\n  }; // render\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Toolbar, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    color: \"inherit\",\n    className: classes.grow,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, \"Dashboard\"), /*#__PURE__*/React.createElement(Button, {\n    onClick: refresh(),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, \"Refresh\")), /*#__PURE__*/React.createElement(Section, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }, isRefreshing ? /*#__PURE__*/React.createElement(Loading, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 15\n    }\n  }) : /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    to: routes.adminUserList.path,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(CardContent, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.title,\n    color: \"textSecondary\",\n    gutterBottom: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 25\n    }\n  }, \"Users Count\"), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h5\",\n    component: \"h2\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 25\n    }\n  }, counts.users))))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(CardContent, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.title,\n    color: \"textSecondary\",\n    gutterBottom: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 23\n    }\n  }, \"Notes Count\"), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h5\",\n    component: \"h2\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 23\n    }\n  }, counts.notes)))))));\n}; // Component Properties\n\n\nDashboard.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles)(Dashboard);","map":{"version":3,"sources":["/Users/ChampionRobert/ForkedStudioProjects/fullstack-js-arch-webonly/src/modules/admin/dashboard/Dashboard/index.js"],"names":["React","useState","useEffect","PropTypes","useDispatch","Link","Typography","Toolbar","Button","Grid","Card","CardContent","withStyles","styles","routes","getDashboardCount","messageShow","Section","Loading","Dashboard","classes","isRefreshing","isRefreshingToggle","users","notes","counts","setCounts","dispatch","refresh","data","success","grow","adminUserList","path","title","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["// Imports\nimport React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { useDispatch } from 'react-redux'\nimport { Link } from 'react-router-dom'\n\n// UI Imports\nimport Typography from '@material-ui/core/Typography'\nimport Toolbar from '@material-ui/core/Toolbar/Toolbar'\nimport Button from '@material-ui/core/Button/Button'\nimport Grid from '@material-ui/core/Grid'\nimport Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport { withStyles } from '@material-ui/core/styles'\nimport styles from './styles'\n\n// App Imports\nimport routes from '../../../../setup/routes'\nimport { getDashboardCount } from '../../../user/api/actions/query'\nimport { messageShow } from '../../../common/api/actions'\nimport Section from '../../../common/Section'\nimport Loading from '../../../common/Loading'\n\n// Component\nconst Dashboard = ({ classes }) => {\n  // state\n  const [isRefreshing, isRefreshingToggle] = useState(false)\n  const [counts, setCounts] = useState({\n    users: 0,\n    notes: 0\n  })\n  const dispatch = useDispatch()\n\n  // on component load\n  useEffect(() => {\n    refresh()()\n  }, [])\n\n  // refresh\n  const refresh = () => async () => {\n    isRefreshingToggle(true)\n\n    try {\n      const counts = await getDashboardCount()\n\n      if(counts.data && counts.data.success) {\n        setCounts(counts.data.data)\n      }\n    } catch(error) {\n      dispatch(messageShow('There was some error. Please try again.'))\n    } finally {\n      isRefreshingToggle(false)\n    }\n  }\n\n  // render\n  return (\n    <div>\n      <Toolbar>\n        <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\n          Dashboard\n        </Typography>\n\n        <Button onClick={refresh()}>\n          Refresh\n        </Button>\n      </Toolbar>\n\n      <Section>\n        {\n          isRefreshing\n            ? <Loading />\n            : <Grid container spacing={2}>\n                <Grid item>\n                  <Link to={routes.adminUserList.path}>\n                    <Card>\n                      <CardContent>\n                        <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                          Users Count\n                        </Typography>\n                        <Typography variant=\"h5\" component=\"h2\">\n                          { counts.users }\n                        </Typography>\n                      </CardContent>\n                    </Card>\n                  </Link>\n                </Grid>\n\n                <Grid item>\n                  <Card>\n                    <CardContent>\n                      <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                        Notes Count\n                      </Typography>\n                      <Typography variant=\"h5\" component=\"h2\">\n                        { counts.notes }\n                      </Typography>\n                    </CardContent>\n                  </Card>\n                </Grid>\n            </Grid>\n        }\n      </Section>\n    </div>\n  )\n}\n\n// Component Properties\nDashboard.propTypes = {\n  classes: PropTypes.object.isRequired\n}\n\nexport default withStyles(styles)(Dashboard)\n"]},"metadata":{},"sourceType":"module"}